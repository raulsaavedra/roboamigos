{"version":3,"sources":["components/Card.js","components/CardList.js","components/ErrorBoundry.js","components/SearchBox.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","_ref","id","name","email","console","log","react_default","a","createElement","className","src","concat","width","height","alt","CardList","robots","map","robot","i","components_Card","key","ErrorBoundry","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","children","Component","SearchBox","searchChange","type","placeholder","onChange","Header","nextProps","nextState","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","components_Header","components_SearchBox","components_ErrorBoundry","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4991ff50.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nconst Card = ({id, name, email}) => {\r\n\tconsole.log('Card');\r\n\treturn (\r\n\t\t<div className=\"bg-light-green pa3 ma2 tc dib bw2 shadow-5 grow\">\r\n\t\t\t<img src={`https://robohash.org/${id}hehe`} width=\"200\" height=\"200\" alt=\"robots\"/>\r\n\t\t\t<div>\r\n\t\t\t<h2>{name}</h2>\r\n\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\nconst CardList = ({ robots }) => {\r\n\t\tconsole.log('CardList');\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{robots.map((robot, i) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<Card\r\n\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\tid={robots[i].id}\r\n\t\t\t\t\t\tname={robots[i].name}\r\n\t\t\t\t\t\temail={robots[i].email}\r\n\t\t\t\t\t/>\r\n\t\t\t\t);\r\n\t\t\t})}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default CardList;\r\n","import React, { Component } from \"react\";\r\n\r\nclass ErrorBoundry extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info) {\r\n\t\tthis.hasError({hasError: true})\r\n\t}\r\n\trender() {\r\n\t\treturn this.state.hasError ? <h1>Oops! That is not good</h1> : this.props.children;\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n\t\tconsole.log('Searchbox');\r\n\treturn (\r\n\t\t<div className=\"pa2\">\r\n\t\t\t<input \r\n\t\t\tclassName=\"pa2 b--green bg-lightest-blue\" \r\n\t\t\ttype=\"search\" \r\n\t\t\tplaceholder=\"search robots\"\r\n\t\t\tonChange = {searchChange}\r\n\t\t\t/>\r\n\r\n\t\t</div>\r\n\t\t);\r\n};\r\nexport default SearchBox;","import React, {Component} from 'react';\r\n\r\nclass Header extends Component {\r\n\r\n\tshouldComponentUpdate(nextProps, nextState) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\trender() {\r\n\t\tconsole.log('Header');\r\n\t\treturn( \r\n\t\t\t\t<div>\r\n\t\t\t\t<h1>Roboamigos</h1>\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\t}\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Header from '../components/Header';\r\nimport './App.css';\r\n\r\nimport { setSearchField, requestRobots } from '../actions'\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\tsearchField: state.searchRobots.searchField,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\terror: state.requestRobots.error\r\n\t};\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tonSearchChange: event => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots: () => dispatch(requestRobots())\r\n\t};\r\n};\r\n\r\nclass App extends Component {\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.props.onRequestRobots();\r\n\t}\r\n\trender() {\r\n\t\tconst {searchField, onSearchChange, robots, isPending} = this.props;\r\n\t\tconst filteredRobots = robots.filter(robot => {\r\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t\t});\r\n\t\treturn (\r\n\t\t\t<div className='tc'>\r\n\t\t\t<Header/>\r\n\t\t\t<SearchBox searchChange={onSearchChange} />\r\n\t\t  { isPending ? <h1>Loading</h1> : \r\n\t\t\t\t<ErrorBoundry>\r\n\t\t\t\t\t<CardList robots={filteredRobots} />\r\n\t\t\t\t</ErrorBoundry>\r\n\t\t\t}\r\n\t\t\t</div>\r\n\t\t\t);\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import { CHANGE_SEARCH_FIELD,\r\n\t\t\tREQUEST_ROBOTS_PENDING,\r\n\t\t\tREQUEST_ROBOTS_SUCCESS,\r\n\t\t\tREQUEST_ROBOTS_FAILED\r\n\t\t\t} from './constants.js';\r\n\r\n\r\nexport const setSearchField = (text) => ({\r\n\ttype: CHANGE_SEARCH_FIELD,\r\n\tpayload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n\tdispatch({ type: REQUEST_ROBOTS_PENDING });\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response => response.json())\r\n\t\t.then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n\t\t.catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}\t\t","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\nconst initialStateSearch = {\r\n\tsearchField: ''\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n\tswitch (action.type) {\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn Object.assign({}, state, { searchField: action.payload });\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\nconst initialStateRobots = {\r\n\tisPending: false,\r\n\trobots: [],\r\n\terror: ''\r\n}\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n\tswitch (action.type) {\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn Object.assign({}, state, { isPending: true });\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn Object.assign({}, state, {\r\n\t\t\t\trobots: action.payload,\r\n\t\t\t\tisPending: false\r\n\t\t\t});\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn Object.assign({}, state, {\r\n\t\t\t\terror: action.payload,\r\n\t\t\t\tisPending: false\r\n\t\t\t});\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\nconst rootReducer = combineReducers({searchRobots, requestRobots})\n\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}